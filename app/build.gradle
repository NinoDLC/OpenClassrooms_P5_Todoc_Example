apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 31
    buildToolsVersion '31.0.0'

    defaultConfig {
        applicationId "fr.delcey.todoc"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        testInstrumentationRunnerArguments clearPackageData: 'true'
//      TODO See if this project matured : https://github.com/growse/Android-Test-Coverage-Sample
//        or this sample : https://github.com/android/testing-samples/pull/411
//        testInstrumentationRunnerArguments useTestStorageService: 'true'
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'

    // Room
    def room_version = "2.4.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    testImplementation 'junit:junit:4.13.2'
    // Helps testing livedata : InstantTaskExecutorRule, for example
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    // Helps mocking objects (Mockito.mock() or Mockito.spy())
    testImplementation 'org.mockito:mockito-core:3.11.1'

    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
}

// prints detailed depreciation warning during compilation
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
    options.compilerArgs += ['-Xlint:unchecked']
}

// open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

// TODO See if this project matured : https://github.com/growse/Android-Test-Coverage-Sample
//  or this sample : https://github.com/android/testing-samples/pull/411
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    doLast {
        openReport layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile
    }

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_Impl*.*', // Room implementations
            '**/*Binding.*',
            '**/*Fragment.*',
            '**/*Activity.*',
            '**/*Adapter.*',
            '**/*DiffCallback.*',
            '**/*ViewHolder.*',
            '**/*ViewModelFactory.*',
            '**/*Entity.*',
            '**/*AppDatabase*.*',
            '**/BuildConfigResolver.*',
            '**/MainThreadExecutor.*',
            '**/*Test*.*',
            'android/**/*.*'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
    ]))
}